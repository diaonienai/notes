1.程序与进程
程序只是指令、数据及其组织形式的描述，进程才是程序的真正运行实例

程序转换为进程的三个步骤
（1）内核将程序读入内存，为程序分配内存空间
（2）内核为进程分配进程标识符pid
（3）内核保存pid及相应状态信息，把进程放到运行队列等待执行，就可以被操作系统的调度程序调度执行了

创建进程的两种方法
（1）由操作系统创建，只有在系统启动时会创建0号进程，是所有其他进程的祖先
（2）由父进程创建

2.进程结构
代码段，数据段，堆栈段

fork()函数创建子进程会返回两次，会把父进程的数据段和堆栈段copy一份副本到子进程，代码段是共享的，所以是父子进程是独立的，子进程return释放的自己的数据，不会影响到父进程

vfork()函数创建的子进程与父进程共享内存，子进程要先执行完退出，父进程才会往下执行，如果子进程return，由于return会释放堆栈段，父进程就会崩

3.僵尸进程与孤儿进程
僵尸进程：fork子进程后，子进程退出后，父进程没有调用wait或者waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中
孤儿进程：子进程还在运行，父进程已经退出，孤儿进程会被1号init进程收养，并由init进程对他们完成状态收集工作

4.守护进程
守护进程是脱离于终端并且在后台运行的进程，终端关闭时，还可以执行，直到系统关闭才会退出，也就是说，不会因为用户或者终端发生变化而受到影响

创建守护进程步骤
（1）先创建一个孤儿进程，即创建子进程，父进程退出，这时候子进程的父进程就变成init进程
（2）在子进程创建一个新会话，因为子进程继承了父进程的会话期，进程组，控制终端，用setsid就可以摆脱原会话的控制，原进程组的控制，原控制终端的控制
（3）设置工作目录为根目录，因为继承了父进程的当前工作目录，chdir
（4）重设文件权限掩码，因为继承了父进程的文件掩码，可能对以后使用文件造成影响umask(0)
（5）关闭文件描述符，在父进程时已经打开的文件，现在要关闭，释放资源,close(i)


5.进程间通信
管道，消息队列，共享内存提供进程间传递数据的方法，信号量和信号则用于其他进程的触发行为，socket?可以同一主机，可以不同主机?
（1）管道
单向通信，只能一个读管道，一个写管道，因此是FIFO先进先出的队列，一次只能有一个进程访问管道，而且是只能父子进程或者兄弟进程之间，管道也是一个文件，只不过这个文件在内存中
int fd[2];
pipe(fd);
fork();
write();
read();阻塞
close(fd[OUTPUT])
close(fd[INPUT]);

（2）有名管道
不需要进程之间有亲缘关系，以FIFO的文件形式存放于文件系统中
mkfifo("文件路径",mode);
write();
read();


（3）消息队列
在系统内核保存消息的队列，实现形式是链表
与命名管道不同的是：
独立于发送进程和接收进程
不需要由进程来提供同步方法
接收程序通过消息类型有选择地接收数据
msgget(key,mode);
msgsend();
msgrcv();


（4）共享内存
进程间的数据不用传送，而是直接访问内存，是进程间通信的最快的方式，但是并没提供同步机制，可以通过信号量进行同步

shmget(key,size,mode);
shmat();
//分离
shmdt();
//删除
shmctl();



















