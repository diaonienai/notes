1.计算机网络的定义
一些互相连接、独立的计算机的集合

2.协议层
OSI体系结构：应用层、表示层、会话层、运输层、网络层、数据链路层、物理层
TCP/IP体系结构：应用层、运输层、网际层、网络接口层
五层协议：应用层、传输层、网络层、数据链路层、物理层

分层好处
1.各层之间独立。某一层不需要知道下层如何实现，只需知道通过层间接口所提供的服务。
2.灵活性好。当任何一层发生变化，只要层间接口保持不变，则上下各层都不受影响。
3.易于实现和维护。这种结构使得一个复杂的系统划分为若干个子系统，出现问题时可以根据具体情况维护相关的层，不用涉及整个系统。

应用层：任务是通过应用进程间的交互来完成网络应用，对于不同的网络应用有不同的应用层协议，应用层交互的数据叫做报文

运输层：任务是负责为两个主机中进程间的通信提供通用的数据传输服务，所谓通用，是指多种应用可以使用一个传输层服务，因此运输层具有复用和分用功能，主要两种协议：
TCP：传输控制协议，面向连接，可靠，数据传输单位是报文段
UDP：用户数据报协议，无连接，尽最大努力，不保证可靠，数据传输单位是用户数据报

网络层：负责为分组交换网上的不同主机提供通信服务，其中一个任务是把传输层的报文段或者用户数据报封装成分组或者包进行传送，另一个任务是选择合适的路由，使源主机传输层所传下来的分组能够通过网络的路由器找到目的主机

数据链路层：因为数据传输总是在一段一段在链路传送的，因此该层的任务是把网络层的IP数据报封装成帧，即加上头部和尾部，接收端根据头部和尾部，知道一个帧从哪个比特开始和到哪个比特结束，然后就可以提取出数据部分，提交给网络层

物理层：考虑发送方发送0或1，接收方应当收到的是0或1

3.数据链路层要解决三个问题
封装成帧（接收方接收到比特流后根据头部和尾部提取数据部分），透明传输（转义），差错检测（尾部包含FCS，用CRC检错）
PPP协议帧格式：头部加上尾部总共8字节
MAC协议帧格式：头部加上尾部总共16字节，尾部只有4个字节的FCS
以太网最小帧长为64，保证在发送完数据之前，能检测到碰撞，所以MAC帧的IP数据报长度至少为64-18=46，当IP数据报长度少于46时，就在后面加入整数字节的填充字段，而IP层在收到数据链路层的数据后，根据总长度这个字段，删除填充字段
集线器工作在物理层，它的接口仅仅简单转发比特
网桥工作在数据链路层，采用储存转发的方式，根据转发表转发帧
交换机，就是多接口的网桥，工作在全双工方式，不需要CSMA/CD协议


4.网络层向上只提供简单灵活的，无连接的，不可靠的数据报服务
1.分类地址
A类地址：8位网络号 0
B类地址：16位网络号 10
C类地址：24位网络号 110
D类地址：1110多播地址
E类地址：1111保留地址
2.划分子网
由两级地址变成三级地址，借用主机号的若干位作为子网号
3.无分类编址CIDR
消除ABC类地址以及划分子网的概念，变回两级结构，只有网络前缀和主机号
路由聚合，也称为构成超网，可大大减少路由表的项目

IP地址与硬件地址
1.物理地址是数据链路层和物理层使用的地址，IP地址是网络层和以上各层使用的地址，是一种逻辑地址
2.IP地址放在IP数据报中的首部，物理地址放在MAC帧的首部
3.虽然网络层使用的是IP地址，但是在实际网络的链路上传送数据帧时，最终用的是硬件地址，所以需要地址解析协议ARP，由IP地址得到硬件地址，原理是每一个主机都有一个ARP高速缓存，里面有本局域网上各主机和路由器的IP地址到硬件地址的映射表
4.各式各样的网络使用不同的物理地址，要使这些异构网络能够相互通信必须进行复杂的硬件地址转换工作，统一的IP地址解决这个问题，让因特网的主机就像在同一个网络上通信，上述复杂的过程让ARP解决

5.IP数据报格式
1.头部固定20个字节，包括版本，首部长度，总长度，标识（一个数据报的所有分片有相同的标识，为了在接收方重装成原来的数据报），标志，片偏移（以8个字节为单位），生存时间（其实是指定跳数），协议（知名数据报携带的数据是使用何种协议，比如ICMP，IGMP，TCP，UDP，OSPF），首部检验和（只检验数据报的首部），源地址，目的地址

6.ICMP
1.ICMP报文作为IP数据报的数据部分，加上首部，组成IP数据报
有ICMP差错报告报文和ICMP询问报文两种，PING就是应用层直接使用网络层ICMP的一个例子
2.IGMP，在多播时候用到，让连接在本局域网的多播路由器知道本局域网上是否有主机参加或退出某个多播组

7.路由选择协议
1.内部网关协议IGP：在一个自治系统内部使用的路由选择协议，如RIP和OSPF
2.外部网关协议EGP：把数据报从一个自治系统传递到另一个自治系统
RIP：基于距离向量的路由选择协议，利用UDP传送，只与相邻路由器交换路由信息，适用于小型网络
OSPF：基于链路状态的路由选择协议，只有链路状态发生变化时，才用洪泛法把链路状态信息发送给所有相邻的路由器，所有的路由器最终能建立一个全网的拓补结构图，直接用IP数据报传送，适用于大型网络
外部网关协议：使用TCP连接交换路由信息

8.IP多播
源主机只发送一份数据，路由器在转发的时候复制成副本，分别转发，当多播组的主机很多时，大大减少网络上的流量

9.IP隧道技术
将数据报（可能需要加密）再进行一次封装，即加上普通数据报的首部，最后到达的路由器提取数据部分，再进行转发，应用例子：虚拟专用网VPN，利用因特网作为个专用网之间的通信载体

10.网络地址转换NAT
专用网内的主机发送数据报时，将专用地址转换成全球唯一的IP地址，将端口号转换成新的端口号，然后发送到因特网上，在接收数据报时，从IP数据报的数据部分提取端口号，然后根据端口号找到目的主机进行转发，这样就可以在专用网络内使用专用地址，只有连接到因特网上的路由器使用全球IP地址，可大大节约宝贵的IP地址

11.运输层为相互通信的进程提供逻辑通信，使应用进程看见的就是好像在两个运输层实体之间有一条端到端的逻辑通信通道

12.网络层为主机之间提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信

13.用户数据报协议UDP
无连接，不可靠，面向报文，没有拥塞控制，首部开销小，只有8个字节
可实现一对一，多对一，一对多，多对多的交互通信
首部有源端口，目的端口，长度，检验和等字段，每个字段都是2个字节，共有8个字节
检验和即检验首部，也检验数据部分，因为在检验的时候要加上伪首部，而伪首部有源IP地址，目的IP地址，所以在检验的时候就检验了源IP地址，目的IP地址
发送的报文长度是应用程序决定的

14.传输控制协议TCP
面向连接，只能点对点通信，可靠交付，全双工通信，有缓存，面向字节流
面向字节流即TCP把应用程序交下来的数据看成一连串的字节流
发送的报文段长度，即包含多少字节，是根据对方给出的接收窗口长度和当前网络拥塞的程度决定的
TCP连接的端点是套接字，即IP地址和端口的组合

15.TCP报文格式
首部固定部分20个字节，包括源端口，目的端口，序号，确认号，数据偏移，保留字段，URG，ACK，PSH，RST，SYN，FIN，窗口，检验和，紧急指针，选项（长度可变），填充
序号：本报文段所发送的数据的第一个字节的序号
确认号：期望收到对方的下一个报文段的第一个数据字节的序号，若确认号为N，则表明前面N-1的数据都已正确收到
数据偏移：已4字节为单位，就是首部长度
ACK：连接建立之后所有传送的报文段都必须把ACK置1
SYN：在建立连接时用来同步序号
FIN：释放连接置1
窗口：让对方作为设置其发送窗口的依据
检验和：检验首部和数据

MSS最大报文段长度，其实是TCP的数据部分长度，加上首部才等于整个TCP报文长度，规定每一个TCP报文段中的数据字段的最大长度

16.TCP可靠传输的原理
1.停止等待协议
每发送完一个分组就停止发送，等待对方的确认，在收到确认后再发送下一个分组，分组需要编号
2.超时重传
只要超过一段时间没有收到确认，就重传，每发送完一个分组就设置一个超时计时器，这种自动重传方式成为自动重传请求ARQ
基于以上两种原理，有连续ARQ协议和滑动窗口协议
1.连续ARQ协议
发送方维持一个发送窗口，位于发送窗口的分组都可以连续发送出去，不需等待对方的确认，接收方一般采用累积确认，对第N个分组进行确认，表明已正确收到前面的N-1个分组
2.滑动窗口协议
窗口里面的序号表示允许发送的序号，窗口后沿部分表示已发送且受到确认，前沿部分表示不允许发送

17.流量控制是一个端对端问题，是接收端抑制发送端发送数据的速率，而拥塞控制涉及到所有主机，所有路由器，以及所有降低网络性能有关的所有元素

18.拥塞控制
发送方维持一个叫做拥塞窗口cwnd的状态变量
慢开始算法：一开始cwnd设置一个MSS长度，每经过一个传播轮次，cwnd就加倍
拥塞避免：每经过一个传播轮次，cwnd就增加一个MSS长度
快重传：发送方只要一连收到三个重复确认就应当立即重传对方尚未接收的报文段，不必等待重传计时器
快恢复：与快重传配合使用，当发送方连续收到三个重复确认，就认为网络很可能没有发生拥塞，因为发生拥塞，就不会一连好几个报文达到接收方，也就不会导致接收方连续发送重复确认，因此不执行慢开始算法，而是把cwnd设置为当前值的一半，并更新慢开始门限值ssthresh，然后执行拥塞避免

19.发送窗口
发送窗口 = min（对方的接收窗口，拥塞窗口）

20.随机早期检测RED
当平均队列长度小于最小门限THmin，则放入队列进行排队
当平均队列长度大于最大门限THmax，把新大道的分组丢弃
当平均队列长度在THmin和THmax之间，将新到达的分组以概率P丢弃
目的：防止尾部丢弃所引起的许多TCP连接同时进入慢开始，整个网络通信量突然下降很多，而在网络恢复后，通信量又突然增大很多

21.TCP建立连接
三次握手
1.SYN = 1, seq = x
2.SYN = 1, ACK = 1, seq = y, ack = x + 1
3.ACK = 1, seq = x + 1, ack = y + 1
为什么需要第三次握手，预防这样一种情况，客户端发出的第一次请求在网络中滞留了很长时间，在断开连接后才到达服务器，此时服务器误以为客户端又想建立连接，然后发出接受连接的报文，此时如果没有第三次握手，服务器就认为新的连接已经建立，一直等待客户端发来数据，资源就会浪费。如果有了第三次握手，客户端就不会向服务器的确认发出确认，服务器由于收不到确认，就知道客户端并没有要求连接

22.TCP释放连接
四次握手
1.FIN = 1, seq = u
2.ACK = 1, seq = v, ack = u + 1
...
3.FIN = 1, ACK = 1, seq = w, ack = u + 1
4.ACK = 1, seq = u + 1, ack = w + 1
然后客户端等待2MSL
为什么要等待2MSL
MSL：最长报文段寿命
1.保证第四次握手能够到达服务器，如果丢失，服务器会重传FIN+ACK报文，客户端就会在2MSL时间内收到重传的FIN+ACK报文，就会重传最后一个确认报文
2.使得本连接中所有报文都消失在网络中，防止上一次连接的数据出现在新的连接中，服务器误以为是本连接的数据

状态机


























