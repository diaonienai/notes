1.http重定向（http层）
负载均衡服务器根据用户的http请求，计算出一个新的地址并写入http重定向响应中，浏览器重新访问
好处：实现简单
坏处：浏览器完成一次访问要经过两个http请求

2.dns服务器域名解析（应用层）
在DNS服务器上根据一个域名配置多个Web服务器的IP地址
好处：
将负载均衡的工作交给了DNS，而且DNS支持基于地理位置的域名解析，将域名解析一个成离用户最近的服务器的ip地址，加快访问速度
坏处：
DNS负载均衡的控制权在域名服务商手里，无法根据实际服务器的实时负载差异来调整调度策略

3.反向代理（http层，就是http请求转发）
反向代理服务器（使用NginX实现）根据负载均衡算法将请求转发到不同的web服务器处理，处理结果经过反向代理服务器返回给浏览器
好处：
1.调度策略丰富，可根据实际服务器的负载调整负载均衡策略
2.反向代理服务器可以让用户在一次会话周期内的所有请求始终转发到一台特定的后端服务器上（粘滞会话）
坏处：反向代理服务器负载较大，开销较大，创建线程，与后端服务器建立TCP连接，接收后端服务器返回后结果，分析http头部消息等等

4.IP负载均衡（IP层，网关服务器）
负载均衡服务器收到请求后，获取IP数据报，根据算法得到一台真实的服务器地址，然后把IP数据报的地址修改为真实服务器的IP地址，数据返回给负载均衡服务器后，把源地址修改成自身地址再返回给用户，类似于反向代理服务器负载均衡
好处：在响应请求时比反向代理方式要快
坏处：当请求大文件的时候，因为要经过中间服务器，所以吞吐量不高，反向代理也有这个缺点


5.直接路由（数据链路层负载均衡）
通过修改帧的目标MAC地址（不修改IP地址），将帧转发到实际服务器上，实际服务器将处理结果直接发送给客户端，而不经过调度器，负载均衡服务器和实际的服务器群的虚拟IP一样
好处：不需要更改IP地址，数据响应不经过负载均衡服务器

6.IP隧道
将调度器收到的IP数据报封装在一个新的IP数据报中，转发给实际服务器，然后实际服务器直接把结果返回给客户端，因此，实际服务器可以和调度器不在同一个网段，也就是说每个实际服务器必须有一个合法的IP地址
好处：可以将实际服务器根据需要部署在不同的地域，通过就近访问原则来转移请求


